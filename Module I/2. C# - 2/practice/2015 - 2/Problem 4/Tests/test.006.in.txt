129
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodCalls
{
    class Program
    {
        static bool CheckForMethodCall   (  string   line   ,  int   position  )  
        {  
            for (   int    i= position; i < line.Length; i++   )
            {
                if (  line[i] == ' '  )
                {
                    continue;
                }

                if (  line[i] == '('   )
                {
                    return true;
                }

                break;
            }

            return false;
        }

        static   void    Main   (    string[]   args    )
        {

        // taken from https://msdn.microsoft.com/en-us/library/x53a06bb.aspx - remove all known keywords which can invoke methods - primitive data types - example int.Parse
        string     []   keywords = new string[] ;
        
		List <   int    > someInts = new   List   <  int   >   (   );

            int    numberOfLines   =   int.   Parse   (   Console   .   ReadLine  ()   );

            List<  string> methodCalls = new    List  <  string    >    ()   ;

            int foundMethods = 0;

            for (     int   i   =   0  ;    i    <     numberOfLines;    i++   )
            {
                var currentReadLine = Console   .     ReadLine()     ;

                currentReadLine = currentReadLine    .  Trim();
                int indexOfMethodDeclaration = 0;

                if (currentReadLine   .   IndexOf  (   "static "   )    == 0)
                {
                    if (methodCalls   .Count > 0)
                    {
                        Console  .   WriteLine  (   string  .  Join  (  ", ",  methodCalls  )  );
                    }

                    if (foundMethods > 0 && methodCalls.Count == 0)
                    {
                        Console. WriteLine   (  "None"  );
                    }

                    methodCalls  .  Clear();

                    int indexOfOpenBracket = currentReadLine  .   IndexOf   ("(");
                    int indexOfSpaceBeforeBracket = currentReadLine  .  LastIndexOf  (  "   ", indexOfOpenBracket);
                    indexOfMethodDeclaration = indexOfOpenBracket;

                    Console  .   Write(    currentReadLine  .   Substring   (    indexOfSpaceBeforeBracket + 1, indexOfOpenBracket - indexOfSpaceBeforeBracket - 1));
                    Console  .  Write(  " -> "   )  ;
                    foundMethods++;
                }

                var currentWord = new StringBuilder();

                bool isKeyWord = false;
                string lastKeyword = string.Empty;

                for (int j = indexOfMethodDeclaration; j < currentReadLine.Length; j++)
                {
                    if (char.    IsLetter(   currentReadLine[j]))
                    {
                        currentWord.Append(currentReadLine[j]   );
                        continue;
                    }

                    if (!char.    IsLetter(    currentReadLine[j]   ) && currentWord.Length > 0)
                    {
                        var currentWordString = currentWord   .ToString      ();
                        if (Array   .   IndexOf(keywords, currentWordString) > -1)
                        {
                            isKeyWord = true;
                            currentWord.Clear();
                            lastKeyword = currentWordString;
                            continue;
                        }
                        else if (lastKeyword != "new")
                        {
                            isKeyWord = false;
                        }

                        if (   CheckForMethodCall   (currentReadLine, j))
                        {
                            if (isKeyWord)
                            {
                                isKeyWord = false;
                                currentWord.Clear();
                                continue;
                            }

                            isKeyWord = false;

                            methodCalls   .  Add(currentWordString);
                        }

                        currentWord  .   Clear();
                    }
                }
            }

            if (methodCalls.Count > 0)
            {
                Console   . WriteLine(string  .   Join(", ", methodCalls));
            }
        }
    }
}